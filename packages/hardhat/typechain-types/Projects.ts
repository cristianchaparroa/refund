/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Projects {
  export type StageStruct = { percentage: BigNumberish };

  export type StageStructOutput = [percentage: bigint] & { percentage: bigint };
}

export interface ProjectsInterface extends Interface {
  getFunction(
    nameOrSignature: "addStage" | "createProject" | "getStage" | "projects"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addStage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
}

export interface Projects extends BaseContract {
  connect(runner?: ContractRunner | null): Projects;
  waitForDeployment(): Promise<this>;

  interface: ProjectsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStage: TypedContractMethod<[percentage: BigNumberish], [void], "payable">;

  createProject: TypedContractMethod<[title: string], [void], "payable">;

  getStage: TypedContractMethod<
    [index: BigNumberish],
    [Projects.StageStructOutput],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        title: string;
        state: string;
        stagesSize: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStage"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<[title: string], [void], "payable">;
  getFunction(
    nameOrSignature: "getStage"
  ): TypedContractMethod<
    [index: BigNumberish],
    [Projects.StageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        title: string;
        state: string;
        stagesSize: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
